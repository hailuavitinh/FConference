#!/usr/bin/env node
var debug = require('debug')('Express4'), 
	https = require("https");;
var app = require('../app');
var path = require('path'),
	fs = require('fs');
var socket = require("socket.io");


app.set('port', process.env.PORT || 3001);

var options = {
    key: fs.readFileSync(path.join(__dirname, '../certs/privatekey.pem')),
    cert: fs.readFileSync(path.join(__dirname, '../certs/certificate.pem')),
    requestCert: false,
    rejectUnauthorized: false
};

// var server = app.listen(app.get('port'), function() {
//   debug('Express server listening on port ' + server.address().port);
//   console.log('running on port: ' + server.address().port);
// });
var port = process.env.PORT || 3001;
var server = https.createServer(options, app).listen(port, function(){
    console.log("Server HTTPS listening with port ....",port);
    console.log("Process ENV:",process.env.JWT_SECRET);
});


var clickX = [];
var clickY = [];
var clickDrag = [];
var colorArray = [];
var konvaPosition = [];
var textArray = [];

var io = socket.listen(server);

io.sockets.on('connection',function(socket){
    
    socket.emit("message",{message:"Welcome to Whiteboard",
                            clickX:clickX,
                            clickY:clickY,
                            clickDrag:clickDrag,
                            colorArray:colorArray });

    socket.on("draw",function(data){
        clickX = data.clickX;
        clickY = data.clickY;
        clickDrag = data.clickDrag;
        colorArray =data.colorArray;
        socket.broadcast.emit('drawing',data);
    });

    socket.emit("messageKonva",{konvaPosition:konvaPosition});

    socket.on("drawKonva",function(data){
        var item = {
            oldPointerPosition:data.oldPointerPosition,
            newPointerPosition:data.newPointerPosition,
            color:data.color
        };
        konvaPosition.push(item);
        socket.broadcast.emit('drawingKonva',item);
    });

    socket.on("clearBoard", function(data) {
        konvaPosition = [];
        socket.broadcast.emit('clearBoard',{isClear: true});
    });

    socket.on("addText", function(data) {
        textArray.push(data);
        socket.broadcast.emit('addText',data);
    });
    
    socket.on("deleteText", function(data) {
        //textArray.push(data);
        socket.broadcast.emit('deleteText', data);
    });

    socket.on("moveText", function(data) {
        socket.broadcast.emit('moveText', data);
    });

});
